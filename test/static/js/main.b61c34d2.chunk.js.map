{"version":3,"sources":["components/WebXR/Model.js","components/WebXR/Switcher.js","components/WebXR/WebXR.js","App.js","index.js"],"names":["model","reticle","controls","Switcher","props","type","onClick","onSelect","name","light","THREE","scene","camera","window","innerWidth","innerHeight","renderer","antialias","alpha","hitTestSource","hitTestSourceRequested","Model","canvasContainer","useRef","useEffect","add","setPixelRatio","devicePixelRatio","setSize","outputEncoding","xr","enabled","current","append","domElement","ARButton","createButton","requiredFeatures","optionalFeatures","domOverlay","root","loadModel","remove","mtlLoader","MTLLoader","objLoader","OBJLoader","setPath","path","load","mtl","materials","preload","setMaterials","obj","object","getReticle","getControl","setAnimationLoop","render","rotateX","Math","PI","matrixAutoUpdate","visible","getController","addEventListener","handleSelect","handleResize","position","setFromMatrixPosition","matrix","oldPosition","y","DragControls","transformGroup","aspect","updateProjectionMatrix","timestamp","frame","referenceSpace","getReferenceSpace","session","getSession","requestReferenceSpace","then","requestHitTestSource","space","source","hitTestResults","getHitTestResults","length","hit","fromArray","getPose","transform","className","ref","id","z","colors","map","color","onSelectModel","WebXR","useState","item","selectedModel","setSelectedModel","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b61c34d2.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport './Model.css';\r\nimport * as THREE from 'three';\r\nimport {ARButton} from 'three/examples/jsm/webxr/ARButton';\r\nimport {OBJLoader} from \"three/examples/jsm/loaders/OBJLoader\";\r\nimport {MTLLoader} from \"three/examples/jsm/loaders/MTLLoader\";\r\nimport {DragControls} from \"three/examples/jsm/controls/DragControls\";\r\nimport Switcher from \"./Switcher\";\r\n/*import * as dat from \"dat.gui\";*/\r\n\r\nconst light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1)\r\nconst scene = new THREE.Scene()\r\nconst camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.01, 600);\r\nconst renderer = new THREE.WebGLRenderer({antialias: true, alpha: true});\r\nlet model;\r\nlet hitTestSource = null;\r\nlet hitTestSourceRequested = false;\r\nlet reticle;\r\nlet controller;\r\nlet controls;\r\nlet mouse = new THREE.Vector2();\r\nlet raycaster = new THREE.Raycaster();\r\nlet objects = [];\r\nlet selected = false;\r\n\r\nconst Model = (props) => {\r\n    const canvasContainer = useRef();\r\n\r\n    useEffect(() => {\r\n        scene.add(camera);\r\n        scene.add(light);\r\n        /*camera.position.z = 2;*/\r\n\r\n        renderer.setPixelRatio(window.devicePixelRatio);\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        renderer.outputEncoding = THREE.sRGBEncoding;\r\n        renderer.xr.enabled = true;\r\n        canvasContainer.current.append(renderer.domElement);\r\n\r\n        canvasContainer.current.append(ARButton.createButton(renderer, {\r\n            requiredFeatures: ['hit-test'],\r\n            optionalFeatures: ['dom-overlay'],\r\n            domOverlay: {root: canvasContainer.current}\r\n        }));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        loadModel();\r\n        return () => {\r\n            scene.remove(model);\r\n        }\r\n    }, [props.model]);\r\n\r\n    const loadModel = () => {\r\n        const mtlLoader = new MTLLoader();\r\n        const objLoader = new OBJLoader();\r\n\r\n        mtlLoader.setPath(props.path)\r\n            .load(props.model.mtl, materials => {\r\n                materials.preload();\r\n                objLoader.setMaterials(materials);\r\n                objLoader.setPath(props.path);\r\n                objLoader.load(props.model.obj, object => {\r\n                    model = object;\r\n                   /* objects.push(model);*/\r\n                    getReticle(model);\r\n                    getControl();\r\n                    /*scene.add(model);*/\r\n                    renderer.setAnimationLoop(render);\r\n                });\r\n            });\r\n    }\r\n\r\n    const getReticle = () => {\r\n        reticle = new THREE.Mesh(\r\n            new THREE.RingGeometry(0.05, 0.07, 32).rotateX(-Math.PI / 2),\r\n            new THREE.MeshStandardMaterial()\r\n        );\r\n        reticle.matrixAutoUpdate = false;\r\n        reticle.visible = false;\r\n        scene.add(reticle);\r\n    }\r\n\r\n    const getControl = () => {\r\n        controller = renderer.xr.getController(0);\r\n        controller.addEventListener('select', handleSelect);\r\n        window.addEventListener('resize', handleResize);\r\n        /*window.addEventListener('click', handleClickDrag);*/\r\n       /* controls = new DragControls([model], camera, renderer.domElement);\r\n        controls.transformGroup = true;\r\n        controls.addEventListener('drag', () => {\r\n            model.position.y = 0;\r\n            render()\r\n        });*/\r\n    }\r\n\r\n    const handleSelect = () => {\r\n        if (reticle.visible) {\r\n            model.position.setFromMatrixPosition(reticle.matrix);\r\n            let oldPosition = model.position.y;\r\n\r\n            controls = new DragControls([model], camera, renderer.domElement);\r\n            controls.transformGroup = true;\r\n\r\n            scene.remove(reticle);\r\n            scene.add(model);\r\n\r\n            /*controls.addEventListener('dragstart', () => {\r\n                selected = true;\r\n            })*/\r\n            controls.addEventListener('drag', () => {\r\n                model.position.y = oldPosition;\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleResize = () => {\r\n        camera.aspect = window.innerWidth / window.innerHeight;\r\n        camera.updateProjectionMatrix();\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n    }\r\n\r\n/*\r\n    const handleClickDrag = (eo) => {\r\n        eo.preventDefault();\r\n        /!*if (selected === true) {\r\n            const draggableObjects = controls.getObjects();\r\n            draggableObjects.length = 0;\r\n\r\n            mouse.x = (eo.clientX / window.innerWidth) * 2 - 1;\r\n            mouse.y = -(eo.clientY / window.innerHeight) * 2 + 1;\r\n\r\n            raycaster.setFromCamera(mouse, camera);\r\n            const intersections = raycaster.intersectObjects(objects, true);\r\n\r\n            if (intersections.length > 0) {\r\n                console.log(111);\r\n                const object = intersections[0].object;\r\n\r\n                if (model.children.includes(object) === true) {\r\n                    scene.attach(object);\r\n                } else {\r\n                    model.attach(object);\r\n                }\r\n                controls.transformGroup = true;\r\n                draggableObjects.push(model);\r\n            }\r\n\r\n            if (model.children.length === 0) {\r\n                controls.transformGroup = false;\r\n                draggableObjects.push(...objects);\r\n            }\r\n        }*!/\r\n        render();\r\n    }\r\n*/\r\n\r\n    const render = (timestamp, frame) => {\r\n        if (frame) {\r\n            const referenceSpace = renderer.xr.getReferenceSpace();\r\n            const session = renderer.xr.getSession();\r\n            if (hitTestSourceRequested === false) {\r\n                session.requestReferenceSpace('viewer').then(function (referenceSpace) {\r\n                    session.requestHitTestSource({space: referenceSpace}).then(function (source) {\r\n                        hitTestSource = source;\r\n                    });\r\n                });\r\n\r\n                session.addEventListener('end', function () {\r\n                    hitTestSourceRequested = false;\r\n                    hitTestSource = null;\r\n                });\r\n                hitTestSourceRequested = true;\r\n            }\r\n\r\n            if (hitTestSource) {\r\n                const hitTestResults = frame.getHitTestResults(hitTestSource);\r\n                if (hitTestResults.length) {\r\n                    const hit = hitTestResults[0];\r\n                    reticle.visible = true;\r\n                    reticle.matrix.fromArray(hit.getPose(referenceSpace).transform.matrix);\r\n                } else {\r\n                    reticle.visible = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        renderer.render(scene, camera);\r\n    }\r\n    const handleSizePlus = () => model.position.z += 0.01;\r\n    const handleSizeMinus = () => model.position.z += -0.01;\r\n\r\n    return (\r\n        <div className='canvas_container' ref={canvasContainer}>\r\n            <div className='buttons'>\r\n                <button type='button' id='place-button' onClick={handleSizePlus}>Near</button>\r\n                <button type='button' id='place-button' onClick={handleSizeMinus}>Far</button>\r\n                {props.colors.map(color => <Switcher key={color} name={color} onSelect={props.onSelectModel}/>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Model;","import React from 'react';\r\n\r\nconst Switcher = (props) => {\r\n    return (\r\n        <button type='button' onClick={() => props.onSelect(props.name)}>{props.name}</button>\r\n    )\r\n}\r\n\r\nexport default Switcher;","import React, {useState} from 'react';\r\nimport Model from \"./Model\";\r\n\r\nconst WebXR = (props) => {\r\n    const [selectedModel, setSelectedModel] = useState({obj: props.item.obj, mtl: props.item.mtl});\r\n\r\n    const handleSelectModel = (name) => {\r\n        setSelectedModel({obj: `${name}.obj`, mtl: `${name}.mtl`});\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Model model={selectedModel}\r\n                   path={props.item.path}\r\n                   colors={props.item.colors}\r\n                   onSelectModel={handleSelectModel}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WebXR;","import React from \"react\";\nimport WebXR from \"./components/WebXR/WebXR\";\n\nfunction App() {\n    let obj = {\n        test: {\n            path: './assets/models/test/',\n            obj: 'A.obj',\n            mtl: 'A.mtl',\n            colors: ['A', 'B', 'C']\n        },\n        tableN: {\n            path: './assets/models/tableN/',\n            obj: 'tableN.obj',\n            mtl: 'tableN.mtl',\n            colors: []\n        },\n        carpet: {\n            path: './assets/models/carpet/',\n            obj: 'carpet.obj',\n            mtl: 'carpet.mtl',\n            colors: []\n        },\n        plant: {\n            path: './assets/models/plant/',\n            obj: '8.obj',\n            mtl: '8.mtl',\n            colors: []\n        },\n        anim: {\n            path: './assets/models/anim/',\n            obj: 'box.obj',\n            mtl: 'box.mtl',\n            colors: []\n        },\n        testunit: {\n            path: './assets/models/testunit/',\n            obj: '1unit1meter.obj',\n            mtl: '1unit1meter.mtl',\n            colors: []\n        },\n        test2: {\n            path: './assets/models/test2/',\n            obj: 'box1meter.obj',\n            mtl: 'box1meter.mtl',\n            colors: []\n        },\n        test3: {\n            path: './assets/models/test3/',\n            obj: '1unit1meter.obj',\n            mtl: '1unit1meter.mtl',\n            colors: []\n        },\n        test4: {\n            path: './assets/models/test4/',\n            obj: 'box1meter.obj',\n            mtl: 'box1meter.mtl',\n            colors: []\n        },\n    }\n\n    return (\n        <div>\n            <WebXR item={obj.test4}/>\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}