{"version":3,"sources":["components/GoogleAnalytics/Events.js","components/Catalog/Catalog.js","components/Catalog/Category/Category.js","components/WebXR/ARModel/ARModel.js","components/WebXR/ARHitTest/ARHitTest.js","components/WebXR/AROverlay/AROverlay.js","components/WebXR/ARLoader/ARLoader.js","components/WebXR/AROverlay/AROverlayGray.js","components/WebXR/WebXR.js","components/Catalog/Size/Size.js","components/Catalog/Video/Video.js","App.js","serviceWorker.js","index.js"],"names":["GAevent","categoryName","eventName","label","value","ReactGA","event","category","action","nonInteraction","Catalog","data","handleGAEventClickVideo","className","Object","keys","map","id","slug","title","image","to","onClick","handleGAEventClickCategory","src","alt","handleGAEventClickSize","Category","useParams","history","useHistory","useState","os","setOS","useEffect","userAgent","window","navigator","test","handleClickLink","productId","push","handleGAEventClickStartAR","products","product","color","size","price","usdz","href","rel","getProduct","type","ARModel","arGLTF","matrix","onShowOverlay","scale","useThree","camera","domElement","gl","gltf","useLoader","GLTFLoader","controls","useRef","axisYPosition","scene","set","x","y","z","position","setFromMatrixPosition","current","DragControls","transformGroup","addEventListener","object","ARHitTest","onHit","onHitMatrix","box","useHitTest","hit","decompose","rotation","ref","args","onPointerDown","AROverlay","mfrLink","style","display","document","getElementById","click","open","ARLoader","progress","useProgress","Html","center","AROverlayGray","scaleSizes","Math","round","WebXR","location","useLocation","canvas","time","Date","now","isHit","setIsHit","hitMatrix","setHitMatrix","showOverlay","setShowOverlay","setProduct","mode","setMode","setScale","grayModel","state","find","Number","body","removeChild","unmountComponentAtNode","querySelector","handleIsHit","handleStartSession","arConfig","requiredFeatures","optionalFeatures","domOverlay","root","append","ARButton","createButton","btn","xr","handleGAEventSessionDuration","goBack","setTimeout","dpr","onCreated","intensity","fallback","Size","xInput","yInput","zInput","figure","sides","side","index","htmlFor","placeholder","def","baseX","baseY","baseZ","pathname","Video","handleGAEventSendVideoDuration","autoPlay","preload","poster","App","initGA","exact","path","from","Boolean","hostname","match","initialize","GApageView","page","pageview","ReactDOM","render","StrictMode","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.75cfaeb2.chunk.js","sourcesContent":["import ReactGA from 'react-ga';\r\n\r\nexport const GAevent = (categoryName, eventName, label = ' ', value = 10) => {\r\n    ReactGA.event({\r\n        category: categoryName,\r\n        action: eventName,\r\n        label: label,\r\n        value: value,\r\n        nonInteraction: false\r\n    });\r\n}\r\n\r\nexport const GAtiming = (categoryName, variableName, valueNum) => {\r\n    ReactGA.timing({\r\n        category: categoryName,\r\n        variable: variableName,\r\n        value: valueNum\r\n    });\r\n};\r\n\r\nexport const GAexception = (detail) => {\r\n    ReactGA.exception({ description: detail });\r\n};","import React from 'react';\r\nimport './Catalog.css';\r\nimport {Link} from \"react-router-dom\";\r\nimport {GAevent} from \"../GoogleAnalytics/Events\";\r\n\r\nconst Catalog = ({data}) => {\r\n    const handleGAEventClickSize = (title) => {\r\n        GAevent('SIZE', 'click size', title);\r\n    }\r\n\r\n    const handleGAEventClickCategory = (title) => {\r\n        GAevent('CATEGORY', `click category`, title);\r\n    }\r\n\r\n    const handleGAEventClickVideo = () => {\r\n        GAevent('VIDEO', 'click video', 'video')\r\n    }\r\n\r\n    const getCatalogList = () => {\r\n        const categories = Object.keys(data);\r\n\r\n        return categories.map(category => {\r\n            const {id, slug, title, image} = data[category];\r\n\r\n            return (\r\n                <li key={id} className='catalog_item'>\r\n                    <Link\r\n                        className='item_link_category'\r\n                        to={`/catalog/${slug}`}\r\n                        onClick={() => handleGAEventClickCategory(title)}\r\n                    >\r\n                        <img className='item_link_category_image' src={image} alt={title}/>\r\n                        <span className='item_link_category_title'>{title}</span>\r\n                    </Link>\r\n                    <Link\r\n                        className='item_link_category_size'\r\n                        to={`/size/${slug}`}\r\n                        onClick={() => handleGAEventClickSize(title)}\r\n                    >\r\n                        <img\r\n                            className='item_link_category_size_image'\r\n                            src='./assets/images/other/ruler.png'\r\n                            alt={title + ' size'}\r\n                        />\r\n                    </Link>\r\n                </li>\r\n            );\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className='catalog_container'>\r\n            <div className='catalog_header'>Каталог</div>\r\n            <ul className='catalog_list'>\r\n                {getCatalogList()}\r\n                <li className='catalog_item_video' onClick={() => handleGAEventClickVideo}>\r\n                    <Link className='item_link_video' to='/video'>\r\n                        Как это работает?\r\n                    </Link>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Catalog;","import React, {useEffect, useState} from 'react';\r\nimport './Category.css';\r\nimport {Link, useHistory, useParams} from 'react-router-dom';\r\nimport {GAevent} from \"../../GoogleAnalytics/Events\";\r\n\r\nconst Category = ({data}) => {\r\n    const {category} = useParams();\r\n    const history = useHistory();\r\n\r\n    const handleGAEventClickStartAR = (title) => {\r\n        GAevent('CATEGORY', 'click startAR', title);\r\n    }\r\n\r\n    const handleGAEventClickSize = (title) => {\r\n        GAevent('CATEGORY', 'click size', title);\r\n    }\r\n\r\n    const [os, setOS] = useState('');\r\n\r\n    useEffect(() => {\r\n        const userAgent = window.navigator.userAgent;\r\n\r\n        if (/iPhone|iPad|iPod/i.test(userAgent)) {\r\n            setOS('apple')\r\n        } else {\r\n            setOS('android');\r\n        }\r\n    }, []);\r\n\r\n    const handleClickLink = (productId, title) => {\r\n        if (os === 'android') {\r\n            history.push(`/ar/${category}/${productId}`);\r\n        }\r\n\r\n        handleGAEventClickStartAR(title);\r\n    }\r\n\r\n    const getProduct = (product) => {\r\n        const {id, title, image, color, size, price, usdz} = product;\r\n        if (os === 'apple') {\r\n            return (\r\n                <li key={id} className='category_item'>\r\n                    <a className='category_item_apple_link' id=\"ar-link\" href={usdz} rel='ar'>\r\n                        <div className='category_item_image_container'>\r\n                            <img className='category_item_image' src={image} alt={title}/>\r\n                            <img className='category_item_ar_image' src='/assets/images/other/ar-link.svg' alt='ar'/>\r\n                        </div>\r\n                        <div className='category_item_title'>{title}</div>\r\n                        <div className='category_additional_info_container'>\r\n                            <div className='category_item_color'><span>Цвет: </span>{color}</div>\r\n                            <div className='category_item_size'><span>Размеры, см: </span>{size}</div>\r\n                        </div>\r\n                        <div className='category_item_price'>{price} BYN</div>\r\n                    </a>\r\n                </li>\r\n            )\r\n        } else {\r\n            return (\r\n                <li key={id} className='category_item' onClick={() => {\r\n                    handleClickLink(id, title, usdz);\r\n                }}>\r\n                    <div className='category_item_image_container'>\r\n                        <img className='category_item_image' src={image} alt={title}/>\r\n                        <img className='category_item_ar_image' src='/assets/images/other/ar-link.svg' alt='ar'/>\r\n                    </div>\r\n                    <div className='category_item_title'>{title}</div>\r\n                    <div className='category_additional_info_container'>\r\n                        <div className='category_item_color'><span>Цвет: </span>{color}</div>\r\n                        <div className='category_item_size'><span>Размеры, см: </span>{size}</div>\r\n                    </div>\r\n                    <div className='category_item_price'>{price} BYN</div>\r\n                </li>\r\n            );\r\n        }\r\n    }\r\n\r\n    const getCategoryProducts = () => {\r\n        const {products} = data[category];\r\n\r\n        return products.map(product => {\r\n            return getProduct(product);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className='category_container'>\r\n            <div className='category_header'>{data[category].title}</div>\r\n            <ul className='category_list'>\r\n                {getCategoryProducts()}\r\n            </ul>\r\n            {os !== 'apple' &&\r\n            <Link\r\n                className='category_link_size_container'\r\n                to={`/size/${category}`}\r\n                onClick={() => handleGAEventClickSize(data[category].title)}\r\n            >\r\n                <button className='category_link_size' type='button'>\r\n                    Подобрать по размерам\r\n                </button>\r\n            </Link>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Category;","import React, {useEffect, useRef} from 'react';\r\nimport {useLoader, useThree} from \"@react-three/fiber\";\r\nimport {GLTFLoader} from \"three/examples/jsm/loaders/GLTFLoader\";\r\nimport {DragControls} from \"three/examples/jsm/controls/DragControls\";\r\n\r\nconst ARModel = ({product: {arGLTF}, matrix, onShowOverlay, scale}) => {\r\n    const {camera, gl: {domElement}} = useThree();\r\n    const gltf = useLoader(GLTFLoader, arGLTF);\r\n    const controls = useRef({});\r\n    const axisYPosition = useRef(0);\r\n\r\n    useEffect(() => {\r\n        if (scale && matrix) {\r\n            gltf.scene.scale.set(scale.x, scale.y, scale.z);\r\n            gltf.scene.position.setFromMatrixPosition(matrix);\r\n            axisYPosition.current = gltf.scene.position.y;\r\n        }\r\n\r\n        /*gltf.scene.scale.set(scale.x, scale.y, scale.z);\r\n        gltf.scene.position.setFromMatrixPosition(matrix);\r\n        axisYPosition.current = gltf.scene.position.y;*/\r\n\r\n        controls.current = new DragControls([gltf.scene], camera, domElement);\r\n        controls.current.transformGroup = true;\r\n\r\n        const handleDragMove = () => (gltf.scene.position.y = axisYPosition.current);\r\n        const handleDragStart = () => onShowOverlay(false);\r\n        const handleDragEnd = () => onShowOverlay(true);\r\n\r\n        controls.current.addEventListener('drag', handleDragMove);\r\n        controls.current.addEventListener('dragstart', handleDragStart);\r\n        controls.current.addEventListener('dragend', handleDragEnd);\r\n    }, []);\r\n\r\n    return (\r\n        <primitive object={gltf.scene}/>\r\n    );\r\n}\r\n\r\nexport default ARModel;","import React, {useRef} from 'react';\r\nimport {useHitTest} from \"@react-three/xr\";\r\nimport {Box} from \"@react-three/drei\";\r\n\r\nconst ARHitTest = ({onHit, onHitMatrix}) => {\r\n    const box = useRef();\r\n\r\n    useHitTest((hit) => {\r\n        if (box.current) {\r\n            hit.decompose(box.current.position, box.current.rotation, box.current.scale);\r\n        }\r\n    });\r\n\r\n    const handlePointerDown = () => {\r\n        onHitMatrix(box.current.matrix);\r\n        onHit(true);\r\n    }\r\n\r\n    return (\r\n        <Box ref={box} args={[0.12, 0.01, 0.12]} onPointerDown={handlePointerDown}/>\r\n    );\r\n}\r\n\r\nexport default ARHitTest;","import React from 'react';\r\nimport './AROverlay.css';\r\nimport {useHistory, useParams} from \"react-router\";\r\nimport {GAevent} from \"../../GoogleAnalytics/Events\";\r\n\r\nconst AROverlay = ({product: {title, price, color, size, mfrLink}, onHit, onShowOverlay}) => {\r\n    const history = useHistory();\r\n    const {category} = useParams();\r\n\r\n    const handleGAEventClickClose = () => GAevent('AR MODEL', 'click close', title);\r\n    const handleGAEventClickReset = () => GAevent('AR MODEL', 'click reset', title);\r\n    const handleGAEventClickRedirect = () => GAevent('AR MODEL', 'click redirect to store', title);\r\n    const handleGAEventClickSize = () => GAevent('AR MODEL', 'click size', title);\r\n\r\n\r\n    const handleClickClose = () => {\r\n        handleGAEventClickClose();\r\n        document.getElementById('ARButton').click();\r\n    }\r\n\r\n    const handleClickReset = () => {\r\n        handleGAEventClickReset();\r\n        onHit(false);\r\n    }\r\n\r\n\r\n    const handleClickBuy = () => {\r\n        handleGAEventClickRedirect();\r\n        document.getElementById('ARButton').click();\r\n        window.open(mfrLink);\r\n    }\r\n\r\n    const handleClickSize = () => {\r\n        handleGAEventClickSize();\r\n        document.getElementById('ARButton').click();\r\n        /*history.push(`/size/${category}`);*/\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='ar_support_container' style={{display: onShowOverlay ? 'block' : 'none'}}>\r\n                <div className='ar_info_close_container' onClick={handleClickClose}>\r\n                    <span className='ar_info_close'/>\r\n                </div>\r\n                <div className='ar_info_reset_container' onClick={handleClickReset}>\r\n                    <img className='ar_info_reset' src='/assets/images/other/reset1.png' alt='reset'/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='ar_info_container' style={{display: onShowOverlay ? 'block' : 'none'}}>\r\n                <div className='ar_info'>\r\n                    <div className='ar_info_main'>\r\n                        <div className='ar_info_main_title'>\r\n                            {title}\r\n                        </div>\r\n                        <div className='ar_info_main_price'>\r\n                            {price} BYN\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className='ar_info_additional'>\r\n                        <div>\r\n                            <span>Цвет: </span>{color}\r\n                        </div>\r\n                        <div>\r\n                            <span>Размеры, см: </span>{size}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <button className='ar_info_button_buy' onClick={handleClickBuy}>Посмотреть карточку товара</button>\r\n                </div>\r\n\r\n                <div className='ar_button_size_container'>\r\n                    <button className='ar_button_size' onClick={handleClickSize}>Подобрать по размерам</button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AROverlay;","import React from \"react\";\r\nimport {Html, useProgress} from '@react-three/drei'\r\n\r\n\r\nconst ARLoader = () => {\r\n    const progress = useProgress();\r\n    return <Html center>{progress.progress} % loaded</Html>\r\n}\r\n\r\nexport default ARLoader;","import React from 'react';\r\nimport './AROverlayGray.css';\r\nimport {GAevent} from \"../../GoogleAnalytics/Events\";\r\n\r\nconst AROverlayGray = ({product: {title, size}, onHit, onShowOverlay, scale}) => {\r\n    const handleGAEventClickClose = () => GAevent('AR GRAY', 'click close', title);\r\n    const handleGAEventClickReset = () => GAevent('AR GRAY', 'click reset', title);\r\n    const handleGAEventClickSize = () => GAevent('AR GRAY', 'click size', title);\r\n\r\n    const handleClickClose = () => {\r\n        handleGAEventClickClose();\r\n        document.getElementById('ARButton').click();\r\n    }\r\n    const handleClickReset = () => {\r\n        handleGAEventClickReset();\r\n        onHit(false);\r\n    }\r\n    const handleClickSize = () => {\r\n        handleGAEventClickSize();\r\n        document.getElementById('ARButton').click();\r\n    }\r\n    const scaleSizes = [\r\n        Math.round(size[0] * scale.x),\r\n        Math.round(size[1] * scale.y),\r\n        Math.round(size[2] * scale.z)\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <div className='ar_gray_support_container' style={{display: onShowOverlay ? 'block' : 'none'}}>\r\n                <div className='ar_gray_info_close_container' onClick={handleClickClose}>\r\n                    <span className='ar_gray_info_close'/>\r\n                </div>\r\n                <div className='ar_gray_info_reset_container' onClick={handleClickReset}>\r\n                    <img className='ar_gray_info_reset' src='/assets/images/other/reset1.png' alt='reset'/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='ar_gray_info_container' style={{display: onShowOverlay ? 'block' : 'none'}}>\r\n                <div className='ar_gray_info'>\r\n                    <div className='ar_gray_info_title'>\r\n                        {title}\r\n                    </div>\r\n                    <div className='ar_gray_info_size'>\r\n                        <span>Размеры, см: </span> {\r\n                        (scaleSizes[2]) ?\r\n                            `${scaleSizes[0]} X ${scaleSizes[1]} X ${scaleSizes[2]}` :\r\n                            `${scaleSizes[0]} X ${scaleSizes[1]}`\r\n                    }\r\n                    </div>\r\n                    <div className='ar_gray_info_test_model'>\r\n                        модель имеет иллюстративный характер\r\n                    </div>\r\n                </div>\r\n\r\n                <div className='ar_gray_button_size_container'>\r\n                    <button className='ar_gray_button_size' onClick={handleClickSize}>Изменить размеры</button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AROverlayGray;","import React, {useEffect, useState, Suspense, useRef} from 'react';\r\nimport './WebXR.css';\r\nimport {useHistory, useLocation, useParams} from \"react-router\";\r\nimport {unmountComponentAtNode} from \"@react-three/fiber\";\r\nimport {ARCanvas, DefaultXRControllers} from \"@react-three/xr\";\r\n\r\nimport ARModel from \"./ARModel/ARModel\";\r\nimport ARHitTest from \"./ARHitTest/ARHitTest\";\r\nimport AROverlay from \"./AROverlay/AROverlay\";\r\n\r\nimport ARLoader from \"./ARLoader/ARLoader\";\r\nimport {ARButton} from \"three/examples/jsm/webxr/ARButton\";\r\nimport AROverlayGray from \"./AROverlay/AROverlayGray\";\r\nimport {GAevent} from \"../GoogleAnalytics/Events\";\r\n\r\nconst WebXR = ({data}) => {\r\n    const {category, productId} = useParams();\r\n    const location = useLocation();\r\n    const canvas = useRef();\r\n    const history = useHistory();\r\n    const time = useRef(Date.now());\r\n\r\n    const [isHit, setIsHit] = useState(false);\r\n    const [hitMatrix, setHitMatrix] = useState({});\r\n    const [showOverlay, setShowOverlay] = useState(true);\r\n    const [product, setProduct] = useState([]);\r\n    const [mode, setMode] = useState('');\r\n    const [scale, setScale] = useState({});\r\n\r\n    const handleGAEventSessionDuration = (time) => {\r\n        GAevent('AR SESSION', 'duration session', `${time} seconds`);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const {products} = data[category];\r\n        const {grayModel} = data[category];\r\n\r\n        if (productId === 'grayModel') {\r\n            setProduct(grayModel);\r\n            setMode('grayModel');\r\n\r\n            setScale(location.state && location.state.scale.current ?\r\n                location.state.scale.current :\r\n                {x: 1, y: 1, z: 1}\r\n            );\r\n        } else {\r\n            const product = products.find(product => product.id === Number(productId));\r\n            setProduct(product);\r\n            setMode('model');\r\n            setScale({x: 1, y: 1, z: 1});\r\n        }\r\n\r\n        return () => {\r\n            if (document.getElementById('ARButton')) {\r\n                document.body.removeChild(document.getElementById('ARButton'));\r\n            }\r\n            unmountComponentAtNode(document.querySelector('canvas'));\r\n        }\r\n    }, [category, data, productId]);\r\n\r\n    const handleIsHit = (hit) => setIsHit(hit);\r\n    const handleHitMatrix = (matrix) => setHitMatrix(matrix);\r\n    const handleSetShowOverlay = (state) => setShowOverlay(state);\r\n    const handleStartSession = (gl) => {\r\n        const arConfig = {\r\n            requiredFeatures: ['hit-test'],\r\n            optionalFeatures: ['dom-overlay'],\r\n            domOverlay: {root: document.querySelector('.canvas_container')}\r\n        }\r\n        document.body.append(ARButton.createButton(gl, arConfig));\r\n        const btn = document.getElementById('ARButton');\r\n\r\n        gl.xr.addEventListener('sessionend', () => {\r\n            const timeEnd = Date.now();\r\n\r\n            handleGAEventSessionDuration((timeEnd - time.current) / 1000);\r\n\r\n            if (!isHit) {\r\n                history.goBack();\r\n            }\r\n        });\r\n\r\n        setTimeout(() => {\r\n            btn.click();\r\n        }, 100);\r\n    }\r\n\r\n    return (\r\n        <div className='canvas_container' ref={canvas}>\r\n            <ARCanvas className='ARCanvas' mode=\"concurrent\" dpr onCreated={({gl}) => handleStartSession(gl)}>\r\n                <directionalLight position={[0, 4, 0]} intensity={1}/>\r\n                <pointLight position={[10, 10, 10]}/>\r\n\r\n                <Suspense fallback={<ARLoader/>}>\r\n                    {\r\n                        !isHit &&\r\n                        <ARHitTest onHit={handleIsHit} onHitMatrix={handleHitMatrix}/>\r\n                    }\r\n                    {\r\n                        isHit &&\r\n                        <ARModel\r\n                            product={product}\r\n                            matrix={hitMatrix}\r\n                            scale={scale}\r\n                            onShowOverlay={handleSetShowOverlay}\r\n                        />\r\n                    }\r\n                </Suspense>\r\n\r\n                <DefaultXRControllers/>\r\n            </ARCanvas>\r\n            {\r\n                isHit && (mode === 'model') ?\r\n                    <AROverlay product={product} onHit={handleIsHit} onShowOverlay={showOverlay}/> :\r\n                    isHit && (mode === 'grayModel') ?\r\n                        <AROverlayGray product={product}\r\n                                       onHit={handleIsHit}\r\n                                       onShowOverlay={showOverlay}\r\n                                       scale={scale}\r\n                        /> :\r\n                        null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WebXR;","import React, {useRef} from 'react';\r\nimport './Size.css';\r\nimport {useParams} from \"react-router\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {GAevent} from \"../../GoogleAnalytics/Events\";\r\n\r\nconst Size = ({data}) => {\r\n    const {category} = useParams();\r\n    const xInput = useRef();\r\n    const yInput = useRef();\r\n    const zInput = useRef();\r\n    const scale = useRef({});\r\n\r\n    const handleGAEventClickAcceptButton = () => {\r\n        GAevent(\r\n            'SIZE',\r\n            'click accept button',\r\n            `X - ${xInput.current.value ? xInput.current.value : 'default'} // \r\n            Y - ${yInput.current.value ? yInput.current.value : 'default'} //\r\n            Z - ${zInput.current.value ? zInput.current.value : 'default'}`\r\n        );\r\n    }\r\n\r\n    const getInputs = () => {\r\n        return data[category].sides.map((side, index) => {\r\n            const ref = index === 0 ? xInput : index === 1 ? yInput : zInput;\r\n            return (\r\n                <div key={index} className='size_input_item'>\r\n                    <label htmlFor={side[0]}>{side[1]}: </label>\r\n                    <input ref={ref} className='size_input' id={side[0]} type='number' placeholder='0'/>\r\n                    <span>см</span>\r\n                </div>\r\n            )\r\n        });\r\n    }\r\n\r\n    const modelScale = () => {\r\n        const def = data[category].grayModel.size;\r\n\r\n        if (def[0] && def[1]) {\r\n            const x = Number(xInput.current.value);\r\n            const y = Number(yInput.current.value);\r\n            const baseX = def[0];\r\n            const baseY = def[1];\r\n\r\n            scale.current = {\r\n                x: (x === 0) ? 1 : x / baseX,\r\n                y: (y === 0) ? 1 : y / baseY\r\n            }\r\n            if (def[2]) {\r\n                const z = Number(zInput.current.value);\r\n                const baseZ = def[2];\r\n                scale.current = {\r\n                    ...scale.current,\r\n                    z: (z === 0) ? 1 : z / baseZ\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='size_container'>\r\n            <div className='size_header'>Введите размеры объекта</div>\r\n\r\n            <div className='size_image_container'>\r\n                <img className='size_image' src={data[category].figure} alt='size'/>\r\n            </div>\r\n\r\n            <div className='size_input_list'>\r\n                {getInputs()}\r\n            </div>\r\n\r\n            <div className='size_accept_button_container' onClick={modelScale}>\r\n                <Link to={{\r\n                    pathname: `/ar/${data[category].slug}/grayModel`,\r\n                    state: {scale: scale}\r\n                }}>\r\n                    <button\r\n                        className='size_accept_button'\r\n                        type='button'\r\n                        onClick={handleGAEventClickAcceptButton}\r\n                    >Применить\r\n                    </button>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Size;","import React, {useEffect} from 'react';\r\nimport './Video.css';\r\nimport {GAevent} from \"../../GoogleAnalytics/Events\";\r\n\r\nconst Video = () => {\r\n\r\n\r\n    const handleGAEventSendVideoDuration = (time) => {\r\n        GAevent('VIDEO', 'duration video', `${time} seconds`);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const time = Date.now();\r\n\r\n        return () => {\r\n            const timeEnd = Date.now();\r\n            handleGAEventSendVideoDuration((timeEnd - time) / 1000);\r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className='video_container'>\r\n            <video autoPlay='autoPlay'\r\n                   preload='auto'\r\n                   controls='controls'\r\n                   poster='./assets/video/example.mp4'\r\n            >\r\n                <source\r\n                    src='./assets/video/example.mp4'\r\n                    type='video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"'\r\n                />\r\n            </video>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Video;","import React, {useEffect} from 'react';\nimport './App.css';\nimport data from './data.json';\n\nimport {BrowserRouter as Router, Redirect, Route, Switch} from 'react-router-dom';\n\nimport Catalog from \"./components/Catalog/Catalog\";\nimport Category from \"./components/Catalog/Category/Category\";\nimport WebXR from \"./components/WebXR/WebXR\";\nimport Size from \"./components/Catalog/Size/Size\";\nimport {initGA} from \"./index\";\nimport Video from \"./components/Catalog/Video/Video\";\n\nfunction App() {\n    useEffect(() => {\n        initGA();\n    }, []);\n\n    return (\n        <Router>\n            <Switch>\n                <Route exact path='/catalog'>\n                    <Catalog data={data}/>\n                </Route>\n                <Route exact path='/catalog/:category'>\n                    <Category data={data}/>\n                </Route>\n                <Route exact path='/ar/:category/:productId'>\n                    <WebXR data={data}/>\n                </Route>\n                <Route exact path='/size/:category'>\n                    <Size data={data}/>\n                </Route>\n                <Route exact path='/video'>\n                    <Video/>\n                </Route>\n                <Redirect from='/' to='/catalog'/>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ReactGA from 'react-ga';\n\nexport const initGA = () => {\n    ReactGA.initialize('UA-198795629-1');\n}\n\nexport const GApageView = (page) => {\n    ReactGA.pageview(page);\n}\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}